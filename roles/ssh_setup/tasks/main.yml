---
- name: Check if user {{ ssh_setup__user.name }} already exists on remote host
  ansible.builtin.getent:
    database: passwd
    key: "{{ ssh_setup__user.name }}"
  failed_when: false
  changed_when: false

- name: Decide if an ssh key must be copied
  ansible.builtin.set_fact:
    must_copy_key: "{{ getent_passwd is not defined }}"

- name: Check if the selected ssh key already exists on the system
  stat:
    path: "{{ ssh_setup__user.key_path }}"
  register: ssh_key_file_stat

- name: Generate SSH keypair for user if not present (control node)
  when: must_copy_key and not ssh_key_file_stat.stat.exists
  community.crypto.openssh_keypair:
    path: "{{ ssh_setup__user.key_path | expanduser }}"
    passphrase: ""
    type: "ed25519"
    comment: "{{ ssh_setup__user.key_comment }}"
    force: false
  become: false
  delegate_to: localhost

- name: Ensure the new user exists
  ansible.builtin.user:
    name: "{{ ssh_setup__user.name }}"
    shell: /bin/bash
    create_home: true
    groups: sudo
    append: true
    password: "!"  # Locks the password so only SSH is allowed
    state: present

- name: Ensure sudo access without a password
  ansible.builtin.lineinfile:
    path: "/etc/sudoers.d/{{ ssh_setup__user.name }}"
    line: "{{ ssh_setup__user.name }} ALL=(ALL) NOPASSWD:ALL"
    create: true
    validate: "visudo -cf %s"

- name: Install public key on remote user authorized_keys if not present
  when: must_copy_key
  ansible.builtin.authorized_key:
    user: "{{ ssh_setup__user.name }}"
    state: present
    key: "{{ lookup('file', ssh_setup__user.key_path | expanduser ~ '.pub') }}"

- name: Harden SSH - Disable root login and password authentication
  ansible.builtin.lineinfile:
    path: "{{ ssh_setup__sshd_config_path }}"
    regexp: "^{{ item.key }}"
    line: "{{ item.value }}"
    state: present
    backup: true
  loop:
    - { key: "PermitRootLogin", value: "PermitRootLogin no" }
    - { key: "PermitEmptyPasswords", value: "PermitEmptyPasswords no" }
    - { key: "PasswordAuthentication", value: "PasswordAuthentication no" }
    - { key: "KbdInteractiveAuthentication", value: "KbdInteractiveAuthentication no" }

  # Point of no return! if something was wrong, we will lose access to the host
  notify: Reload SSH
